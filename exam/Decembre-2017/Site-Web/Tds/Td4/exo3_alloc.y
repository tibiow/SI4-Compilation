/*
 *  exo3.y:         Evaluation d'expressions (forme ETF)
 *
 *
 *           Author: Erick Gallesio [eg@unice.fr]
 *    Creation date: 16-Oct-2015 10:42 (eg)
 * Last file update: 20-Nov-2017 16:47 (eg)
 */

%{
  #include <stdio.h>
  #include <unistd.h>
  #include <string.h>
  #include <stdarg.h>

  #define YYERROR_VERBOSE 1

  void yyerror(const char* msg);
  int yylex(void);
  void print_xml(char *s);
  char *make_string(const char *format, ...);
%}

%union {
    char *attr;
    int val;
}

%token  <val>  NUMBER
%type   <attr> etf expr term factor

%%
etf:             expr '\n'              { print_xml($1); }
        ;

expr:           expr '+' term           { $$= make_string("<add op='+'>%s%s</add>", $1, $3);
                                          free($1); free($3); }
        |       expr '-' term           { $$ = make_string("<add op='-'>%s%s</add>", $1, $3) ;
                                          free($1); free($3); }
        |       term
        ;

term:           term '*' factor         { $$ = make_string("<mul op='*'>%s%s</mul>", $1, $3) ;
                                          free($1); free($3); }
        |       term '/' factor         { $$ = make_string("<mul op='/'>%s%s</mul>", $1, $3) ;
                                          free($1); free($3); }
        |       factor
        ;

factor:         '(' expr ')'            { $$ = strdup($2); }
        |       NUMBER                  { $$ = make_string("<number>%d</number>", $1); }
        ;
%%

char *make_string(const char *fmt, ...) {
  int size = 0;
  char *p = NULL;
  va_list ap;

  /* Determine required size */
  va_start(ap, fmt);
  size = vsnprintf(p, size, fmt, ap);
  va_end(ap);

  if (size < 0)
    return NULL;

  size++;             /* For '\0' */
  p = malloc(size);
  if (p == NULL)
    return NULL;

  va_start(ap, fmt);
  size = vsnprintf(p, size, fmt, ap);
  va_end(ap);

  if (size < 0) {
    free(p);
    return NULL;
  }

  return p;
}


void yyerror(const char* msg) {
  fprintf(stderr, "Error: %s\n", msg);
}

void print_xml(char *xml) {
  printf("<?xml version='1.0' encoding='utf-8' ?>\n");
  printf("<!-- Generated by bison on %s at %s -->\n", __DATE__, __TIME__);
  printf("<?xml-stylesheet href='exo3.css' type='text/css' ?>\n");
  printf("<expr>%s</expr>\n", xml);
  free(xml);
}

int main() {
  return yyparse();
}
